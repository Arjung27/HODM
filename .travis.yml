# We need a decent ubuntu dist
sudo: required
dist: trusty

# Modern cpp settings from
#  http://genbattle.bitbucket.org/blog/2016/01/17/c++-travis-ci/
language: cpp
matrix:
  include:
    - os: linux
      compiler: gcc
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - george-edison55-precise-backports
          packages:
            - g++-5
            - cmake
            - cmake-data
            
            # Additional Packages
            
            - git
            - libgtk2.0-dev
            - pkg-config
            - libavcodec-dev
            - libavformat-dev
            - libswscale-dev
            - python-dev
            - pythonpip
            - pythonnumpy
            - libtbb2
            - libtbb-dev
            - libjpeg-dev
            - libpng-dev
            - libtiff-dev
            - libjasper-dev
            - libdc1394-22-dev
      env: COMPILER=g++-5

before_install:
  - cvVersion="master"
  - cwd=$(pwd)
  - sudo apt -y install build-essential checkinstall cmake pkg-config yasm
  - sudo apt -y install git gfortran
  - sudo apt -y install libjpeg8-dev libjasper-dev libpng12-dev
 
  - sudo apt -y install libtiff5-dev
 
  - sudo apt -y install libtiff-dev
 
  - sudo apt -y install libavcodec-dev libavformat-dev libswscale-dev libdc1394-22-dev
  - sudo apt -y install libxine2-dev libv4l-dev
  - cd /usr/include/linux
  - sudo ln -s -f ../libv4l1-videodev.h videodev.h
  - cd $cwd
 
  - sudo apt -y install libgstreamer0.10-dev libgstreamer-plugins-base0.10-dev
  - sudo apt -y install libgtk2.0-dev libtbb-dev qt5-default
  - sudo apt -y install libatlas-base-dev
  - sudo apt -y install libfaac-dev libmp3lame-dev libtheora-dev
  - sudo apt -y install libvorbis-dev libxvidcore-dev
  - sudo apt -y install libopencore-amrnb-dev libopencore-amrwb-dev
  - sudo apt -y install libavresample-dev
  - sudo apt -y install x264 v4l-utils
 
# Optional dependencies
  - sudo apt -y install libprotobuf-dev protobuf-compiler
  - sudo apt -y install libgoogle-glog-dev libgflags-dev
  - sudo apt -y install libgphoto2-dev libeigen3-dev libhdf5-dev doxygen

  - sudo apt -y install python-dev python-pip
  - sudo -H pip install -U pip numpy
  - sudo apt -y install python-testresources

  - python -m venv OpenCV-"$cvVersion"-py3
  - echo "# Virtual Environment Wrapper" >> ~/.bashrc
  - echo "alias workoncv-$cvVersion=\"source $cwd/OpenCV-$cvVersion-py3/bin/activate\"" >> ~/.bashrc
  - source "$cwd"/OpenCV-"$cvVersion"-py3/bin/activate
  - pip install wheel numpy scipy matplotlib scikit-image scikit-learn ipython dlib --user
  - deactivate

  - cd $cwd
  - git clone https://github.com/opencv/opencv.git
  - cd opencv
  - git checkout $cvVersion
  - cd ..

  - git clone https://github.com/opencv/opencv_contrib.git
  - cd opencv_contrib
  - git checkout $cvVersion
  - cd ..

  - cd opencv
  - mkdir build
  - cd build
  - cmake -D CMAKE_BUILD_TYPE=RELEASE \
            -D CMAKE_INSTALL_PREFIX=/usr/local \
            -D INSTALL_C_EXAMPLES=ON \
            -D INSTALL_PYTHON_EXAMPLES=ON \
            -D WITH_TBB=ON \
            -D WITH_V4L=ON \
            -D OPENCV_PYTHON3_INSTALL_PATH=$cwd/OpenCV-$cvVersion-py3/lib/python3.5/site-packages \
        -D WITH_QT=ON \
        -D WITH_OPENGL=ON \
        -D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib/modules \
        -D BUILD_EXAMPLES=ON ..
  - make -j$(nproc)
  - sudo make install
  - sudo sh -c 'echo "/usr/local/lib" >> /etc/ld.so.conf.d/opencv.conf'
  - sudo ldconfig
  - cd ../../
  -pip install --user cpp-coveralls
install:
  - sudo apt-get install -y -qq lcov
script:
  - export CXX=$COMPILER;
  - mkdir build
  - cd build
  - cmake -DCOVERAGE=ON -DCMAKE_BUILD_TYPE=Debug ../
  - make
  - make code_coverage
  - test/cpp-test

after_success:
  - coveralls --root .. -E ".*external.*" -E ".*CMakeFiles.*" -E ".*test/.*.cpp.*"

notifications:
  email: false
